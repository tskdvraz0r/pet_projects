# Стандартные библиотеки
import typing

# Сторонние библиотеки

# Проектные библиотеки

class Check:
    """
    Notes:
        Класс описывает проверки входных/выходных данных;
    
    Methods:
        value_type() - Метод принимает на вход значение и ожидаемый тип данных. Производит проверку на соответствие переданного типа данных к ожидаемому;
        value_is_available() - Метод принимает на вход значение и проверяет, находится ли оно в списке доступных;

    Raises:
        TypeError: неправильный тип данных;
        ValueError: значение отсутствует среди доступных;
    """
    
    # =========================
    # АТРИБУТЫ
    # =========================
    pass

    # =========================
    # ИНИЦИАЛИЗАЦИЯ
    # =========================
    pass

    # =========================
    # СВОЙСТВА
    # =========================
    pass

    # =========================
    # МЕТОДЫ
    # =========================
    @classmethod
    def value_type(
            cls,
            value: typing.Any,
            expected_type: typing.Any
    ) -> None:
        """
        Notes:
            Метод принимает на вход значение и ожидаемый тип данных. Производит проверку на соответствие переданного типа данных к ожидаемому.

        Args:
            value (typing.Any): значение;
            expected_type (typing.Any): ожидаемый тип данных;

        Raises:
            TypeError("Неправильный тип данных")
        """
        
        if not isinstance(value, expected_type):
            raise TypeError("Неправильный тип данных")
    
    @classmethod
    def value_is_available(
            cls,
            value: typing.Any,
            available: typing.Any
    ) -> None:
        """
        Notes:
            Метод принимает на вход значение и проверяет, находится ли оно в списке доступных;

        Args:
            value (typing.Any): искомое значение;
            available (typing.Any): доступные значения;

        Raises:
            ValueError("Значение отсутствует среди доступных")
        """

        if value not in available:
            raise ValueError("Значение отсутствует среди доступных")